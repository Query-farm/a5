# name: test/sql/a5.test
# description: test a5 extension
# group: [sql]

# Before we load the extension, this will fail
statement error
SELECT a5('test');
----
Catalog Error: Scalar Function with name a5 does not exist!

# Require statement will ensure this test is run with this extension loaded
require a5

# Test getting the area of a A5 cell.
query R
select round(a5_cell_area(columns(*)::integer)) from range(31)
----
42505468731620.0
8501093746324.0
2125273436581.0
531318359145.0
132829589786.0
33207397447.0
8301849362.0
2075462340.0
518865585.0
129716396.0
32429099.0
8107275.0
2026819.0
506705.0
126676.0
31669.0
7917.0
1979.0
495.0
124.0
31.0
8.0
2.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0

# Get the number of cells at each resolution level, there are
# 30 different resolution levels
query I
select a5_get_num_cells(columns(*)::integer) from range(31)
----
12
60
240
960
3840
15360
61440
245760
983040
3932160
15728640
62914560
251658240
1006632960
4026531840
16106127360
64424509440
257698037760
1030792151040
4123168604160
16492674416640
65970697666560
263882790666240
1055531162664960
4222124650659840
16888498602639360
67553994410557440
270215977642229760
1080863910568919000
4323455642275676000
17293822569102705000

# Get the resolution from a cell.
query I
select a5_get_resolution(a5_lonlat_to_cell(55, 44, columns(*)::integer)) from range(30);
----
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29

# Get the cell for a longitude, latitude pair.
query I
select a5_lonlat_to_cell(44, 55, columns(*)::integer) from range(30);
----
1585267068834414592
7277816997830721536
7241788200811757568
7268809798575980544
7271061598389665792
7270498648436244480
7270639385924599808
7270604201552510976
7270630589831577600
7270689963459477504
7270689413703663616
7270689551142617088
7270689516782878720
7270689525372813312
7270689514635395072
7270689517319749632
7270689517722402816
7270689517554630656
7270689517579796480
7270689517586087936
7270689517588709376
7270689517589102592
7270689517588938752
7270689517588963328
7270689517588985856
7270689517588985344
7270689517588987008
7270689517588985376
7270689517588985384
7270689517588985382

# Get the parent cell from a A5 cell.
query I
select a5_cell_to_parent(a5_lonlat_to_cell(44, 55, columns(*)::integer), columns(*)::integer-1) from range(1, 30);
----
1585267068834414592
7277816997830721536
7241788200811757568
7268809798575980544
7271061598389665792
7270498648436244480
7270639385924599808
7270604201552510976
7270683366389710848
7270689963459477504
7270689413703663616
7270689551142617088
7270689516782878720
7270689508192944128
7270689518930362368
7270689517319749632
7270689517453967360
7270689517554630656
7270689517579796480
7270689517590282240
7270689517588709376
7270689517588840448
7270689517588938752
7270689517588979712
7270689517588985856
7270689517588987392
7270689517588985472
7270689517588985376
7270689517588985384

# a5_lon_lat get the center of the A5 cell.
query I
select list_transform(a5_cell_to_lonlat(a5_lonlat_to_cell(44, 55, columns(*)::integer)), x -> round(x)) from range(1, 30);
----
[51.0, 48.0]
[40.0, 52.0]
[45.0, 56.0]
[43.0, 55.0]
[43.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]
[44.0, 55.0]

# Get the list of top level A5 cells at resolution 0
query I
select a5_get_res0_cells()
----
[144115188075855872, 432345564227567616, 720575940379279360, 1008806316530991104, 1297036692682702848, 1585267068834414592, 1873497444986126336, 2161727821137838080, 2449958197289549824, 2738188573441261568, 3026418949592973312, 3314649325744685056]

# Get the child cells of any A5 cell.
query I
select a5_cell_to_children(a5_lonlat_to_cell(44, 55, columns(*)::integer), columns(*)::integer+1)  from range(0, 29);
----
[7566047373982433280, 7854277750134145024, 8142508126285856768, 8430738502437568512, 7277816997830721536]
[7241788200811757568, 7313845794849685504, 7385903388887613440, 7457960982925541376]
[7214766603047534592, 7232781001557016576, 7250795400066498560, 7268809798575980544]
[7262054399134924800, 7266557998762295296, 7271061598389665792, 7275565198017036288]
[7269372748529401856, 7270498648436244480, 7271624548343087104, 7272750448249929728]
[7270076435971178496, 7270357910947889152, 7270639385924599808, 7270920860901310464]
[7270533832808333312, 7270604201552510976, 7270674570296688640, 7270744939040866304]
[7270577813273444352, 7270595405459488768, 7270612997645533184, 7270630589831577600]
[7270623992761810944, 7270628390808322048, 7270632788854833152, 7270637186901344256]
[7270688314192035840, 7270689413703663616, 7270690513215291392, 7270691612726919168]
[7270689001386803200, 7270689276264710144, 7270689551142617088, 7270689826020524032]
[7270689448063401984, 7270689516782878720, 7270689585502355456, 7270689654221832192]
[7270689491013074944, 7270689508192944128, 7270689525372813312, 7270689542552682496]
[7270689518930362368, 7270689523225329664, 7270689527520296960, 7270689531815264256]
[7270689513024782336, 7270689514098524160, 7270689515172265984, 7270689516246007808]
[7270689516917096448, 7270689517185531904, 7270689517453967360, 7270689517722402816]
[7270689517621739520, 7270689517688848384, 7270689517755957248, 7270689517823066112]
[7270689517529464832, 7270689517546242048, 7270689517563019264, 7270689517579796480]
[7270689517573505024, 7270689517577699328, 7270689517581893632, 7270689517586087936]
[7270689517584515072, 7270689517585563648, 7270689517586612224, 7270689517587660800]
[7270689517588316160, 7270689517588578304, 7270689517588840448, 7270689517589102592]
[7270689517589004288, 7270689517589069824, 7270689517589135360, 7270689517589200896]
[7270689517588914176, 7270689517588930560, 7270689517588946944, 7270689517588963328]
[7270689517588957184, 7270689517588961280, 7270689517588965376, 7270689517588969472]
[7270689517588984320, 7270689517588985344, 7270689517588986368, 7270689517588987392]
[7270689517588984960, 7270689517588985216, 7270689517588985472, 7270689517588985728]
[7270689517588986912, 7270689517588986976, 7270689517588987040, 7270689517588987104]
[7270689517588985352, 7270689517588985368, 7270689517588985384, 7270689517588985400]
[7270689517588985378, 7270689517588985382, 7270689517588985386, 7270689517588985390]


# Get the coordinates of the boundary of any A5 cell with at_boundary
query I
select list_transform(a5_cell_to_boundary(a5_lonlat_to_cell(44, 55, columns(*)::integer)), x -> list_transform(x, y-> round(y, 3))) from range(1, 30);
----
[[51.0, 26.668], [51.76, 27.597], [52.534, 28.521], [53.32, 29.441], [54.122, 30.357], [54.939, 31.268], [55.772, 32.173], [56.622, 33.074], [57.49, 33.97], [58.377, 34.859], [59.284, 35.743], [60.212, 36.621], [61.163, 37.492], [62.137, 38.356], [63.135, 39.214], [64.16, 40.063], [65.212, 40.904], [66.292, 41.737], [67.402, 42.561], [68.544, 43.375], [69.719, 44.179], [70.929, 44.972], [72.174, 45.754], [73.458, 46.523], [74.781, 47.28], [76.146, 48.022], [77.554, 48.75], [79.007, 49.462], [80.506, 50.157], [82.053, 50.834], [83.65, 51.492], [85.299, 52.13], [87.0, 52.746], [85.144, 53.372], [83.226, 53.971], [81.248, 54.54], [79.21, 55.077], [77.111, 55.581], [74.955, 56.049], [72.743, 56.48], [70.477, 56.871], [68.162, 57.221], [65.801, 57.528], [63.4, 57.79], [60.964, 58.007], [58.499, 58.177], [56.012, 58.299], [53.51, 58.373], [51.0, 58.397], [48.49, 58.373], [45.988, 58.299], [43.501, 58.177], [41.036, 58.007], [38.6, 57.79], [36.199, 57.528], [33.838, 57.221], [31.523, 56.871], [29.257, 56.48], [27.045, 56.049], [24.889, 55.581], [22.79, 55.077], [20.752, 54.54], [18.774, 53.971], [16.856, 53.372], [15.0, 52.746], [16.701, 52.13], [18.35, 51.492], [19.947, 50.834], [21.494, 50.157], [22.993, 49.462], [24.446, 48.75], [25.854, 48.022], [27.219, 47.28], [28.542, 46.523], [29.826, 45.754], [31.071, 44.972], [32.281, 44.179], [33.456, 43.375], [34.598, 42.561], [35.708, 41.737], [36.788, 40.904], [37.84, 40.063], [38.865, 39.214], [39.863, 38.356], [40.837, 37.492], [41.788, 36.621], [42.716, 35.743], [43.623, 34.859], [44.51, 33.97], [45.378, 33.074], [46.228, 32.173], [47.061, 31.268], [47.878, 30.357], [48.68, 29.441], [49.466, 28.521], [50.24, 27.597], [51.0, 26.668]]
[[31.037, 51.27], [31.476, 50.632], [31.901, 49.993], [32.313, 49.352], [32.714, 48.71], [33.103, 48.067], [33.482, 47.423], [33.851, 46.777], [34.209, 46.13], [34.559, 45.482], [34.9, 44.832], [35.233, 44.181], [35.557, 43.529], [35.875, 42.875], [36.186, 42.22], [36.49, 41.563], [36.788, 40.904], [37.415, 41.379], [38.056, 41.844], [38.713, 42.301], [39.383, 42.749], [40.067, 43.188], [40.764, 43.619], [41.474, 44.042], [42.197, 44.456], [42.931, 44.862], [43.677, 45.259], [44.435, 45.649], [45.204, 46.03], [45.984, 46.404], [46.774, 46.769], [47.576, 47.127], [48.387, 47.476], [48.521, 48.155], [48.658, 48.834], [48.798, 49.514], [48.941, 50.194], [49.088, 50.874], [49.238, 51.555], [49.392, 52.237], [49.551, 52.918], [49.713, 53.601], [49.881, 54.284], [50.053, 54.968], [50.23, 55.652], [50.413, 56.337], [50.602, 57.023], [50.798, 57.71], [51.0, 58.397], [49.94, 58.72], [48.858, 59.034], [47.756, 59.339], [46.632, 59.634], [45.487, 59.919], [44.321, 60.194], [43.134, 60.459], [41.926, 60.714], [40.699, 60.957], [39.451, 61.19], [38.185, 61.412], [36.899, 61.623], [35.595, 61.821], [34.273, 62.009], [32.935, 62.184], [31.58, 62.348], [31.572, 61.667], [31.564, 60.986], [31.556, 60.303], [31.549, 59.619], [31.542, 58.934], [31.535, 58.247], [31.529, 57.56], [31.523, 56.871], [31.462, 56.172], [31.401, 55.474], [31.34, 54.774], [31.279, 54.075], [31.218, 53.375], [31.157, 52.674], [31.097, 51.972], [31.037, 51.27]]
[[40.144, 55.279], [40.496, 54.617], [40.836, 53.955], [41.165, 53.294], [41.484, 52.632], [41.792, 51.97], [42.09, 51.309], [42.38, 50.647], [42.661, 49.985], [43.476, 50.378], [44.304, 50.764], [45.145, 51.142], [46.0, 51.512], [46.868, 51.875], [47.749, 52.231], [48.643, 52.578], [49.551, 52.918], [49.713, 53.601], [49.881, 54.284], [50.053, 54.968], [50.23, 55.652], [50.413, 56.337], [50.602, 57.023], [50.798, 57.71], [51.0, 58.397], [49.94, 58.72], [48.858, 59.034], [47.756, 59.339], [46.632, 59.634], [45.487, 59.919], [44.321, 60.194], [43.134, 60.459], [41.926, 60.714], [41.689, 60.039], [41.462, 59.364], [41.245, 58.686], [41.036, 58.007], [40.804, 57.325], [40.578, 56.643], [40.358, 55.961], [40.144, 55.279]]
[[41.036, 58.007], [41.01, 57.309], [40.982, 56.611], [40.954, 55.914], [40.925, 55.218], [41.443, 54.603], [41.945, 53.986], [42.433, 53.369], [42.907, 52.751], [43.77, 53.139], [44.648, 53.521], [45.541, 53.895], [46.449, 54.262], [46.19, 54.936], [45.923, 55.61], [45.646, 56.284], [45.359, 56.959], [44.299, 57.234], [43.225, 57.501], [42.138, 57.758], [41.036, 58.007]]
[[44.464, 54.817], [44.17, 55.488], [43.867, 56.158], [42.945, 55.771], [42.04, 55.376], [41.993, 54.681], [41.945, 53.986], [42.938, 53.735], [43.92, 53.476], [44.188, 54.147], [44.464, 54.817]]
[[44.188, 54.147], [44.271, 54.839], [43.79, 55.465], [42.883, 55.076], [43.192, 54.409], [44.188, 54.147]]
[[43.391, 54.947], [43.543, 54.613], [43.993, 54.805], [44.032, 55.152], [43.524, 55.284], [43.391, 54.947]]
[[43.711, 55.05], [43.786, 54.883], [44.012, 54.979], [44.032, 55.152], [43.778, 55.218], [43.711, 55.05]]
[[44.072, 54.9], [44.082, 54.987], [44.022, 55.065], [43.909, 55.017], [43.946, 54.934], [44.072, 54.9]]
[[43.972, 55.001], [43.991, 54.959], [44.047, 54.983], [44.052, 55.026], [43.989, 55.043], [43.972, 55.001]]
[[43.981, 55.022], [43.978, 55.0], [43.993, 54.98], [44.022, 54.992], [44.012, 55.013], [43.981, 55.022]]
[[44.006, 54.997], [44.001, 55.007], [43.987, 55.001], [43.986, 54.99], [44.001, 54.986], [44.006, 54.997]]
[[44.004, 54.991], [44.004, 54.997], [44.0, 55.002], [43.993, 54.999], [43.996, 54.993], [44.004, 54.991]]
[[44.002, 54.999], [44.003, 55.002], [44.001, 55.004], [43.997, 55.003], [43.998, 55.0], [44.002, 54.999]]
[[44.0, 55.0], [44.0, 55.001], [43.998, 55.0], [43.998, 54.999], [44.0, 54.998], [44.0, 55.0]]
[[44.0, 55.001], [44.0, 55.0], [44.0, 55.0], [44.001, 55.0], [44.001, 55.001], [44.0, 55.001]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 54.999], [44.001, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]
[[44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0], [44.0, 55.0]]


query II
select
  length(list_transform(a5_cell_to_boundary(a5_lonlat_to_cell(44, 55, columns(*)::integer), false), x -> list_transform(x, y-> round(y, 3)))) as open,
  length(list_transform(a5_cell_to_boundary(a5_lonlat_to_cell(44, 55, columns(*)::integer)), x -> list_transform(x, y-> round(y, 3)))) as closed
from range(1, 30);
----
96	97
80	81
40	41
20	21
10	11
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6
5	6


query II
select
  length(list_transform(a5_cell_to_boundary(a5_lonlat_to_cell(44, 55, columns(*)::integer), false, 5), x -> list_transform(x, y-> round(y, 3)))) as a,
  length(list_transform(a5_cell_to_boundary(a5_lonlat_to_cell(44, 55, columns(*)::integer), false), x -> list_transform(x, y-> round(y, 3)))) as b
from range(1, 30);
----
15	96
25	80
25	40
25	20
25	10
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5
25	5